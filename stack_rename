#!/usr/bin/env python3
import json
import os
import stat
import time
from libs import command_parser, command_checker, custom_logger, file_handler, aws_handler
from libs import cloudformation as cfn
from cfn_flip import to_json
from pprint import pprint

__version__ = '0.1'


def main():
    aws_client = aws_handler.AWS(data=config_data)
    stack_name = options.stack_name
    new_stack_name = options.new_stack
    stack_params = []

    aws_client.login()
    aws_client.cfn_client()
    stack_desc = aws_client.cfn_describe_stack(stack_name=stack_name)
    new_stack_desc = aws_client.cfn_describe_stack(stack_name=new_stack_name)

    if not stack_desc:
        logging.error(f'stack: {stack_name} does not exist aborting')
        raise ValueError(f'Error {stack_name} does not exist')

    if new_stack_desc:
        logging.error(f'stack: {new_stack_name} already exists aborting')
        raise ValueError(f'Error {new_stack_name} already exists')

    if 'Parameters' in stack_desc:
        stack_params = stack_desc['Parameters']
    stack_id = stack_desc['StackId'] # original_stack_id
    current_stack_template = aws_client.cfn_get_template(stack_id=stack_id) # original_template

    # Convert template from ordered dict to normal python dict
    if not isinstance(current_stack_template, str):
        current_stack_template = json.dumps(dict(current_stack_template))
    stack_template = json.loads(to_json(current_stack_template))

    desc_stack_resources = aws_client.cfn_describe_resources(stack_id)
    resource_drifts = cfn.detect_drift(aws_client, stack_id)

    supported_resources, unsupported_resources = cfn.sanitize_template(config_data,
                                                                       stack_template,
                                                                       desc_stack_resources,
                                                                       resource_drifts)
    logging.warning(f'The following resources will be recreated:')
    for unsupported_resource in unsupported_resources:
        logging.warning(f'\n\t* {unsupported_resource}')
    if len(unsupported_resources) > 1:
        continue_migration = str(input('Do you wish to continue? (YES/no): '))
        if continue_migration != 'YES':
            logging.warning(f'Aborting as requested')
            exit(0)

    retain_template = cfn.set_resource_retention(template=stack_template,
                                                 supported_resources=supported_resources)

    sanitized_template, import_resources = cfn.sanitize_resources(config_data,
                                                                  resource_drifts,
                                                                  retain_template)

    # update_response = aws_client.cfn_update_stack(stack_id, retain_template, params=stack_params)
    # aws_client.cfn_waiter(stack_id=stack_id, waiter_type='stack_update_complete')

    # delete_response = aws_client.cfn_delete_stack(stack_id=stack_id)
    # aws_client.cfn_waiter(stack_id=stack_id, waiter_type='stack_delete_complete')

    sanitized_template.pop('Outputs', None)
    changeset_name = f'Stack-Rename-{str(int(time.time()))}'
    # new_stack_id, changeset_response = aws_client.cfn_create_changeset(stack_name=new_stack_name,
    #                                                                   template=sanitized_template,
    #                                                                   resources=import_resources,
    #                                                                   params=stack_params,
    #                                                                   changeset_name=changeset_name)
    # aws_client.cfn_waiter(stack_id=new_stack_id,
    #                      waiter_type='change_set_create_complete',
    #                      changeset_name=changeset_name)

    # aws_client.cfn_exec_changeset(changeset_name=changeset_name, stack_id=new_stack_id)
    # aws_client.cfn_waiter(stack_id=new_stack_id, waiter_type='stack_import_complete')

    logging.info("Cleaning up")

    # aws_client.cfn_update_stack(stack_id=new_stack_id, template=current_stack_template, params=stack_params)
    # aws_client.cfn_waiter(stack_id=new_stack_id, waiter_type='stack_update_complete')

    logging.info(f'Successfully renamed stack from: {stack_name} to {new_stack_name}')

    pprint(stack_desc)
    pprint(stack_template)
    pprint(retain_template)
    pprint(sanitized_template)

    # all resources that cant be imported - we need to list them and say they will be deleted
    # we wont bother importing / exporting them - simplest solution we feed back the original template to the new stack
    # which will rebuild everything as we are already deleting the old stack anyway - anything that can be preserved
    # will be, anything that cant is recreated in the new stack.

    # we need to get the exports and we need to find all stacks importing those exports
    # to force them to import the actual value, rather than the import name
    # finally once everything is moved across we need to update the same stacks
    # to use the new stack_name if the export includes the stack_name and update them to this setting - or should we ?
    # cfn may not be able to recognise the change made here - actually it should do if we use the cloudformation stack
    # change mechanism - the only thing to do then is to the list the changes to the user once done as they will need to
    # update their templates in the associated repos manually afterwards with whatever the new import varibles are now.


if __name__ == "__main__":
    name = 'stack_rename'
    # initialise the command line checker, add in all of the options
    cmd_opts = command_parser.Commands(name=name, version=__version__)
    cmd_opts.add_config()
    cmd_opts.add_aws_auth()
    cmd_opts.add_aws_config()
    cmd_opts.add_cloudformation()
    options, arg_parser = cmd_opts.set_options()
    # set up the logging
    logging = custom_logger.colourLog(name=name, config_file=options.config)
    # set up the io handling
    io_handle = file_handler.FileHandler()
    # initialise the config data
    config_data = io_handle.read_file(options.config)
    # parse through the provided options make sure everything is set as required
    # also do init sanity checks and config fixes/population
    cmd_check = command_checker.CommandCheck(options=options, parser=arg_parser, config_data=config_data)
    cmd_check.aws()
    cmd_check.aws_data(io_handle=io_handle)
    main()
