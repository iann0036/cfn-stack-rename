#!/usr/bin/env python3
import json
import os
import stat
import time
from libs import command_parser, command_checker, custom_logger, file_handler, aws_handler
from libs import cloudformation as cfn
from cfn_flip import to_json
from pprint import pprint

__version__ = '0.1'


def main():
    aws_client = aws_handler.AWS(data=config_data)
    stack_name = options.stack_name
    new_stack_name = options.new_stack
    new_stack_id = None
    stack_params = []

    aws_client.login()
    aws_client.cfn_client()
    stack_desc = aws_client.cfn_describe_stack(stack_name=stack_name)
    new_stack_desc = aws_client.cfn_describe_stack(stack_name=new_stack_name)

    if not stack_desc:
        logging.error(f'stack: {stack_name} does not exist aborting')
        raise ValueError(f'Error {stack_name} does not exist')

    if new_stack_desc:
        logging.error(f'stack: {new_stack_name} already exists aborting')
        raise ValueError(f'Error {new_stack_name} already exists')

    stack_exports = cfn.stack_exports(stack_desc)

    # for time being we will only inform the end user about the imported exports
    # and get them to make the necessary changes manually.
    cfn.stacks_importing_exports(aws_client, stack_exports)

    if 'Parameters' in stack_desc:
        stack_params = stack_desc['Parameters']
    stack_id = stack_desc['StackId']  # original_stack_id
    current_stack_template = aws_client.cfn_get_template(stack_id=stack_id)  # original_template

    # Convert template from ordered dict to normal python dict
    if not isinstance(current_stack_template, str):
        current_stack_template = json.dumps(dict(current_stack_template))
    stack_template = json.loads(to_json(current_stack_template))

    stack_resources = aws_client.cfn_describe_resources(stack_id)  # original_resources
    resource_drifts = cfn.detect_drift(aws_client, stack_id)

    logging.info(f'Resource Drifts info found, sanitizing templates')

    supported_imports, unsupported_imports, undriftables, sanitized_template = cfn.sanitize_template(config_data,
                                                                                                     stack_template,
                                                                                                     stack_resources,
                                                                                                     resource_drifts)
    logging.info(f'Sanitized Template, working out what can be imported')
    if len(unsupported_imports) > 1:
        logging.warning(f'Please Note: \nThe following resources will be deleted and then recreated:')
        for ui_resource, ui_type in unsupported_imports.items():
            print(f'\t* {ui_resource}: {ui_type}')
        continue_migration = str(input('Do you wish to continue? (YES/no): '))
        if continue_migration != 'YES':
            logging.warning(f'Aborting as requested')
            exit(0)

    retain_template = cfn.set_resource_retention(template=stack_template,
                                                 supported_resources=supported_imports)

    verify_update = cfn.verify_action("Update", stack_id)
    if verify_update:
        update_response = aws_client.cfn_update_stack(stack_id, retain_template, params=stack_params)
        aws_client.cfn_waiter(stack_id=stack_id, waiter_type='stack_update_complete')

    sanitized_resource_template, import_resources = cfn.sanitize_resources(config_data,
                                                                           resource_drifts,
                                                                           sanitized_template)
    verify_delete = cfn.verify_action('Delete', stack_id)
    if verify_delete:
        delete_response = aws_client.cfn_delete_stack(stack_id=stack_id)
        aws_client.cfn_waiter(stack_id=stack_id, waiter_type='stack_delete_complete')

    sanitized_template.pop('Outputs', None)
    changeset_name = f'Stack-Rename-{str(int(time.time()))}'
    verify_create_changeset = cfn.verify_action('Create ChangeSet', new_stack_name)
    if verify_create_changeset:
        new_stack_id, changeset_response = aws_client.cfn_create_changeset(stack_name=new_stack_name,
                                                                           template=sanitized_template,
                                                                           resources=import_resources,
                                                                           params=stack_params,
                                                                           changeset_name=changeset_name)
        aws_client.cfn_waiter(stack_id=new_stack_id,
                              waiter_type='change_set_create_complete',
                              changeset_name=changeset_name)

    verify_exec_changeset = cfn.verify_action('Execute ChangeSet', new_stack_id)
    if verify_exec_changeset:
        aws_client.cfn_exec_changeset(changeset_name=changeset_name, stack_id=new_stack_id)
        aws_client.cfn_waiter(stack_id=new_stack_id, waiter_type='stack_import_complete')

    logging.info("Cleaning up")

    verify_update_new_stack = cfn.verify_action('Update New Stack', new_stack_id)
    if verify_update_new_stack:
        aws_client.cfn_update_stack(stack_id=new_stack_id, template=current_stack_template, params=stack_params)
        aws_client.cfn_waiter(stack_id=new_stack_id, waiter_type='stack_update_complete')

    logging.info(f'Successfully renamed stack from: {stack_name} to {new_stack_name}')


if __name__ == "__main__":
    name = 'stack_rename'
    # initialise the command line checker, add in all of the options
    cmd_opts = command_parser.Commands(name=name, version=__version__)
    cmd_opts.add_config()
    cmd_opts.add_aws_auth()
    cmd_opts.add_aws_config()
    cmd_opts.add_cloudformation()
    options, arg_parser = cmd_opts.set_options()
    # set up the logging
    logging = custom_logger.colourLog(name=name, config_file=options.config)
    # set up the io handling
    io_handle = file_handler.FileHandler()
    # initialise the config data
    config_data = io_handle.read_file(options.config)
    # parse through the provided options make sure everything is set as required
    # also do init sanity checks and config fixes/population
    cmd_check = command_checker.CommandCheck(options=options, parser=arg_parser, config_data=config_data)
    cmd_check.aws()
    cmd_check.aws_data(io_handle=io_handle)
    main()
